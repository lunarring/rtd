import numpy as np

def process(img_camera, img_mask, img_diffusion, dynamic_func_coef=1.0):
    """
    Processes the input images.

    The process function selects the pixel values from either the camera image or the diffusion image,
    based on the mask segmentation. If the mask's value is greater than 0.5 for a pixel, the diffusion
    image's pixel is chosen; otherwise, the camera image's pixel is used.

    Parameters:
    img_camera (numpy.ndarray): The camera image with dtype float32.
    img_mask (numpy.ndarray): The mask segmentation image with dtype float32.
    img_diffusion (numpy.ndarray): The diffusion image with dtype float32.
    dynamic_func_coef (float, optional): A coefficient to adjust diffusion image values. Default is 1.0.

    Returns:
    numpy.ndarray: A new image of the same shape as img_camera and with dtype float32.
    """
    # Use numpy's vectorized where to ensure performance.
    return np.where(img_mask > 0.5, img_diffusion * dynamic_func_coef, img_camera).astype(np.float32)
